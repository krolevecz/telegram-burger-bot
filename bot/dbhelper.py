import sqlite3


class DBHelper:
    def __init__(self, db_file):
        self.connection = sqlite3.connect(database=db_file, check_same_thread=False)
        self.cursor = self.connection.cursor()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite.")

        self.cursor.execute(
            'PRAGMA foreign_keys = ON;')
        self.connection.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        print("–í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –≤–∫–ª—é—á–µ–Ω—ã.")

    # users - –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS  users (
            user_id INTEGER PRIMARY KEY, 
            user_name TEXT, 
            phone TEXT,
            delivery_address TEXT);''')
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (users) —Å–æ–∑–¥–∞–Ω–∞.")

    # catalogs - –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS  catalogs (
            catalog_id INTEGER PRIMARY KEY AUTOINCREMENT, 
            catalog_name TEXT UNIQUE );''')
        self.cursor.execute(
            '''INSERT INTO catalogs 
            (catalog_name) 
            VALUES 
            ("üçî –ë—É—Ä–≥–µ—Ä—ã"), 
            ("üçü –ó–∞–∫—É—Å–∫–∏"), 
            ("ü•§ –ù–∞–ø–∏—Ç–∫–∏"), 
            ("üç± –ù–∞–±–æ—Ä—ã");''')
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (catalogs) —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    # products - –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS  products (
            product_id INTEGER PRIMARY KEY AUTOINCREMENT, 
            catalog_id INTEGER NOT NULL, 
            product_name TEXT NOT NULL UNIQUE, 
            description TEXT,
            price REAL NOT NULL,
            photo_url TEXT,
            FOREIGN KEY (catalog_id) REFERENCES catalogs (catalog_id) ON DELETE CASCADE );''')
        self.cursor.execute(
            '''INSERT INTO products 
            (catalog_id, product_name, description, price, photo_url) 
            VALUES 
            (1, "–ë—É—Ä–≥–µ—Ä ¬´–ì–†–£–®–ï–í–ö–ê¬ª", "–ì–æ–≤—è–¥–∏–Ω–∞, —Å—ã—Ä ¬´–§–µ—Ç–∞¬ª, —Å—ã—Ä ¬´–ß–µ–¥–¥–µ—Ä¬ª, –≥—Ä—É—à–∞, –±—Ä—É—Å–Ω–∏—á–Ω—ã–π —Å–æ—É—Å, –±–∞–∑–∏–ª–∏–∫.", 17.00, "grushevka.png"), 
            (1, "–ë—É—Ä–≥–µ—Ä ¬´–î–ê–ë–õ –ë–ò–§¬ª", "–ì–æ–≤—è–¥–∏–Ω–∞, —Å—ã—Ä ¬´–ß–µ–¥–¥–µ—Ä¬ª, –±–µ–∫–æ–Ω, —Å–æ—É—Å ¬´1000 –æ—Å—Ç—Ä–æ–≤–æ–≤¬ª.", 14.00, "dabl_bif.png"), 
            (1, "–ë—É—Ä–≥–µ—Ä ¬´–ê–ú–ï–†–ò–ö–ê–ù–°–ö–ò–ô¬ª", "–ì–æ–≤—è–¥–∏–Ω–∞, —Å—ã—Ä ¬´–ß–µ–¥–¥–µ—Ä¬ª, —Å–æ—É—Å ¬´1000 –æ—Å—Ç—Ä–æ–≤–æ–≤¬ª, —Ç–æ–º–∞—Ç, –ª—É–∫ –∫—Ä–∞—Å–Ω—ã–π, –±–µ–∫–æ–Ω, —Å–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥, –∫–æ—Ä–Ω–∏—à–æ–Ω—ã.", 17.00, "americanskiy.png"), 
            (1, "–ë—É—Ä–≥–µ—Ä ¬´–ß–ò–ü–û–õ–õ–ò–ù–û¬ª", "–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –≥–æ–≤—è–¥–∏–Ω–∞, —Å—ã—Ä ¬´–ß–µ–¥–¥–µ—Ä¬ª, –∞—Ä–æ–º–∞—Ç–Ω—ã–π –±–µ–∫–æ–Ω, –ª—É–∫ –∫–∞—Ä–∞–º–µ–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ª—É–∫ –∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π, —Å–æ—É—Å ¬´–ë–∞—Ä–±–µ–∫—é¬ª.", 15.00, "chipollino.png"), 
            (1, "–ë—É—Ä–≥–µ—Ä ¬´–†–í–ê–ù–´–ô¬ª", "–†–µ–±–µ—Ä–Ω–æ–µ —Ç–æ–º–ª–µ–Ω–æ–µ –º—è—Å–æ (—Å–≤–∏–Ω–∏–Ω–∞), —Å—ã—Ä ¬´–°—É–ª—É–≥—É–Ω–∏¬ª, —Å–æ—É—Å ¬´–ß–∏–ø–æ—Ç–ª–µ¬ª, —Å–∞–ª–∞—Ç.", 20.00, "rvaniy.png"), 
            (2, "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã", "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, —Å–æ—É—Å.", 14.00, "nagetsy.jpeg"), 
            (2, "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ —Å–æ–ª–æ–º–∫–æ–π", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.", 5.00, "fri.png"), 
            (2, "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ —Å —Å–æ—É—Å–æ–º –∏ –±–µ–∫–æ–Ω–æ–º", "–•—Ä—É—Å—Ç—è—â–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, –∞—Ä–æ–º–∞—Ç–Ω—ã–π –±–µ–∫–æ–Ω, —Å—ã—Ä–Ω—ã–π —Å–æ—É—Å.", 10.00, "fri_s_sousom_i_bekonom.png"), 
            (3, "Coca-Cola", "–ù–∞–ø–∏—Ç–æ–∫ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Coca-Cola 250 –º–ª.", 2.50, "cola.png"),
            (3, "Sprite", "–ù–∞–ø–∏—Ç–æ–∫ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Sprite 250 –º–ª.", 2.50, "sprite.png"),
            (3, "Fanta", "–ù–∞–ø–∏—Ç–æ–∫ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Fanta ¬´–ê–ø–µ–ª—å—Å–∏–Ω¬ª 250 –º–ª.", 2.50, "fanta.png"),
            (4, "–ù–∞–±–æ—Ä ‚Ññ1", "–°—ã—Ä —Ñ—Ä–∏, –ª—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞, –Ω–∞–≥–≥–µ—Ç—Å—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ —á–∏–ø—Å—ã, —Å—ã—Ä–Ω—ã–µ –ø–∞–ª–∫–∏, –∫—Ä—ã–ª—å—è –≤ —Å–æ—É—Å–µ ¬´–¢–µ—Ä–∏—è–∫–∏¬ª, –ª—É–∫ —Ñ—Ä–∏, –∫–µ—Ç—á—É–ø, —Å–æ—É—Å ¬´–¢–∞—Ä—Ç–∞—Ä¬ª.", 21.00, "nabor_1.jpeg"),
            (4, "–ù–∞–±–æ—Ä ‚Ññ2", "–ö—Ä—ã–ª—å—è –≤ —Å–æ—É—Å–µ ¬´–ë–∞—Ä–±–µ–∫—é¬ª, —Ä–µ–±—Ä–∞ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ, –ø—Ä—è–Ω—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, —Å—ã—Ä —Ñ—Ä–∏, –∫–æ–ª—å—Ü–∞ –∫–∞–ª—å–º–∞—Ä–∞ –≤ —Ç–µ–º–ø—É—Ä–µ, –∫–æ–ª–±–∞—Å–∫–∏ –Ω–∞ –≥—Ä–∏–ª–µ, –ª—É–∫ –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π, —á–∏–ø—Å—ã –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ, –ª—É–∫ —Ñ—Ä–∏, –æ–≥—É—Ä–µ—Ü –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π, —Å–æ—É—Å ¬´1000 –æ—Å—Ç—Ä–æ–≤–æ–≤¬ª, —Å–æ—É—Å ¬´–†–∞–Ω—á¬ª.", 38.00, "nabor_2.jpeg");''')
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (products) —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    # basket_lines - –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ—Ä–∑–∏–Ω–µ.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS  basket_lines (
            basket_id INTEGER PRIMARY KEY AUTOINCREMENT, 
            user_id INTEGER, 
            product_id INTEGER, 
            product_count INTEGER, 
            FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
            FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE );''')
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (basket_lines) —Å–æ–∑–¥–∞–Ω–∞.")

    # orders - –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS  orders (
            order_id INTEGER PRIMARY KEY AUTOINCREMENT, 
            user_id INTEGER, 
            date_time TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE );''')
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (orders) —Å–æ–∑–¥–∞–Ω–∞.")

    # order_lines - –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS  order_lines (
            order_line_id INTEGER PRIMARY KEY AUTOINCREMENT, 
            order_id INTEGER, 
            product_id INTEGER, 
            product_count INTEGER, 
            FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE, 
            FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE );''')
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (order_lines) —Å–æ–∑–¥–∞–Ω–∞.")

    # news = –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.
        self.cursor.execute(
            '''CREATE TABLE IF NOT EXISTS news (
            news_id INTEGER PRIMARY KEY AUTOINCREMENT,
            news_text TEXT NOT NULL,
            news_date TEXT NOT NULL)'''
        )
        self.connection.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ (news) —Å–æ–∑–¥–∞–Ω–∞.")

        self.cursor.execute(
            '''INSERT INTO news 
            (news_text, news_date) 
            VALUES 
            ("–ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å", datetime("now")), 
            ("–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å", datetime("now", "3 hours"));''')
        self.connection.commit()

    def user_has_phone(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"""
        result = self.cursor.execute(
            'SELECT phone FROM users WHERE user_id = ?;',
            (user_id,))
        return result.fetchone()[0] is not None

    def user_has_delivery_address(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
        result = self.cursor.execute(
            'SELECT delivery_address FROM users WHERE user_id = ?;',
            (user_id,))
        return result.fetchone()[0] is not None

    def get_user_delivery_address(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = self.cursor.execute(
            'SELECT delivery_address FROM users WHERE user_id = ?;',
            (user_id,))
        return result.fetchone()[0]

    def save_user_phone(self, user_id, phone):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute(
            'UPDATE users SET phone =  ? WHERE user_id = ?;',
            (phone, user_id,))
        return self.connection.commit()

    def save_user_delivery_address(self, user_id, delivery_address):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute(
            'UPDATE users SET delivery_address =  ? WHERE user_id = ?;',
            (delivery_address, user_id,))
        return self.connection.commit()

    def get_news(self):
        """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏"""
        result = self.cursor.execute(
            'SELECT news_text, news_date FROM news;')
        return result.fetchall()

    def add_order(self, user_id):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞"""
        self.cursor.execute(
            'INSERT INTO orders (user_id, date_time) VALUES (?, datetime("now", "3 hours"));',
            (user_id,))
        result = self.cursor.execute(
            'SELECT order_id FROM orders WHERE user_id = ? ORDER BY order_id DESC LIMIT 1;',
            (user_id,)).fetchone()
        # –ü–æ–ª—É—á–∞–µ–º order_id —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        order_id = result[0]

        basket = self.get_products_in_basket(user_id=user_id)
        for item in basket:
            self.cursor.execute(
                'INSERT INTO order_lines (order_id, product_id, product_count) VALUES (?, ?, ?);',
                (order_id, item[2], item[3],))

        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–¥–µ–ª–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.')
        return self.connection.commit()

    def add_user(self, user_id, user_name, phone, delivery_address):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
        self.cursor.execute(
            'INSERT INTO users (user_id, user_name, phone, delivery_address) VALUES (?, ?, ?, ?);',
            (user_id, user_name, phone, delivery_address))
        print(f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_name})')
        return self.connection.commit()

    def add_basket_line(self, user_id, product_id):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∏–∑–Ω—É (–µ—Å–ª–∏ –Ω–µ—Ç—É -> –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å -> —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º count)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        result = self.cursor.execute(
            'SELECT * FROM basket_lines WHERE user_id = ? AND product_id = ?;',
            (user_id, product_id,))
        # –ï—Å–ª–∏ –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∏ —Å—Ç–∞–≤–∏–º count = 1.
        if result.fetchone() is None:
            self.cursor.execute(
                'INSERT INTO basket_lines (user_id, product_id, product_count) VALUES (?, ?, ?);',
                (user_id, product_id, 1))
            return self.connection.commit()
        # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ count –Ω–∞ 1.
        else:
            self.cursor.execute(
                'UPDATE basket_lines SET product_count = product_count + 1 WHERE user_id = ? AND product_id = ?;',
                (user_id, product_id,))
            return self.connection.commit()

    def remove_basket_line(self, user_id, product_id):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        self.cursor.execute(
            'DELETE FROM basket_lines WHERE user_id = ? AND product_id = ?;',
            (user_id, product_id,))
        return self.connection.commit()

    def delete_basket_line(self, user_id, product_id):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∏–∑–Ω–µ"""
        result = self.cursor.execute(
            'SELECT * FROM basket_lines WHERE user_id = ? AND product_id = ?;',
            (user_id, product_id,)).fetchone()
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 –µ–¥.
        if result[3] == 1:
            self.remove_basket_line(user_id=user_id, product_id=product_id)
        else:
            self.cursor.execute(
                'UPDATE basket_lines SET product_count = product_count - 1 WHERE user_id = ? AND product_id = ?;',
                (user_id, product_id,))
            return self.connection.commit()

    def get_products_in_basket(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        result = self.cursor.execute(
            'SELECT * FROM basket_lines WHERE user_id = ?;',
            (user_id,))
        return result.fetchall()

    def user_has_product_in_basket(self, user_id, product_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = self.cursor.execute(
            'SELECT * FROM basket_lines WHERE user_id = ? AND product_id = ?;',
            (user_id, product_id,))
        return bool(len(result.fetchall()))

    def clear_basket(self, user_id):
        """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute(
            'DELETE FROM basket_lines WHERE user_id = ?;',
            (user_id,))
        return self.connection.commit()

    def get_users(self):
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (users)"""
        return self.cursor.execute('SELECT * FROM users;').fetchall()

    def get_catalogs(self):
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (catalogs)"""
        return self.cursor.execute('SELECT * FROM catalogs;').fetchall()

    def get_products(self, catalog_id):
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (products)"""
        return self.cursor.execute('SELECT * FROM products WHERE catalog_id = ?;', (catalog_id,)).fetchall()

    def get_product(self, product_id):
        """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –µ–≥–æ id"""
        return self.cursor.execute('SELECT * FROM products WHERE product_id = ?;', (product_id,)).fetchone()

    def get_last_order_info(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = self.cursor.execute(
            'SELECT * FROM orders WHERE user_id = ? ORDER BY order_id DESC LIMIT 1;',
            (user_id,)).fetchone()
        if result is not None:
            last_order_id = result[0]  # order_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞.
            result = self.cursor.execute(
                'SELECT product_id, product_count FROM order_lines WHERE order_id = ?;',
                (last_order_id,)).fetchall()
            text = 'üìé –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:\n'
            for item in result:
                text = f'{text}{self.get_product(item[0])[2]}, {item[1]} —à—Ç\n'
            return text
        else:
            return False

    def put_last_order_to_basket(self, user_id):
        """–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
        result = self.cursor.execute(
            'SELECT * FROM orders WHERE user_id = ? ORDER BY order_id DESC LIMIT 1;',
            (user_id,)).fetchone()
        last_order_id = result[0]   # order_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞.
        result = self.cursor.execute(
            'SELECT product_id, product_count FROM order_lines WHERE order_id = ?;',
            (last_order_id,)).fetchall()
        for item in result:
            count = item[1]
            while count > 0:
                self.add_basket_line(user_id=user_id, product_id=item[0])
                count = count - 1
        return self.connection.commit()

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        self.connection.close()
        print('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.')
