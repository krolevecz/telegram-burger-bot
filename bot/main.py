import sqlite3
import os
from time import sleep
from telebot import TeleBot, types
from dbhelper import DBHelper
from filter import bind_filters
from filter import catalogs_factory, add_products_factory, delete_products_factory, remove_products_factory
from keyboards import general_markup, catalog_markup, product_in_basket_markup, add_product_markup, \
    confirm_basket_markup, last_order_markup, phone_markup
from flask import Flask, request, abort
from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(BOT_TOKEN, threaded=False)

URL = os.getenv("URL")
SECRET = os.getenv("SECRET")
url = URL + SECRET

# Remove webhook, it fails sometimes the set if there is a previous webhook.
bot.remove_webhook()
sleep(0.1)
bot.set_webhook(url=url)

app = Flask(__name__)

bind_filters(bot)

try:
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î.
    # db = DBHelper('sqlite_python.db')
    db = DBHelper(':memory:')

except sqlite3.Error as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö", error)


@app.route('/{}'.format(SECRET), methods=["POST"])
def telegram_webhook():
    if request.headers.get('content-type') == 'application/json':
        # json_string = request.get_data().decode('utf-8')
        json_string = request.stream.read().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'ok', 200
    else:
        abort(403)


# Empty webserver index, return nothing, just http 200.
@app.route('/')
def index():
    return '<h1>Telegram: @ChatBurgerBot</h1>'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞.
@bot.callback_query_handler(func=None, catalogs_config=catalogs_factory.filter())
def catalogs_callback(call: types.CallbackQuery):
    if bot.answer_callback_query(callback_query_id=call.id):
        callback_data: dict = catalogs_factory.parse(callback_data=call.data)
        catalog_id = int(callback_data['catalog_id'])
        result = db.get_products(catalog_id=catalog_id)
        for product in result:
            bot.send_photo(chat_id=call.message.chat.id,
                           photo=open('bot/static/' + product[5], 'rb'),
                           caption=f'*{product[2]}*\n_{product[3]}_\n–¶–µ–Ω–∞: {product[4]} —Ä—É–±',
                           parse_mode='Markdown',
                           reply_markup=add_product_markup(product[0]))
            sleep(0.2)  # –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã.


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (+1) –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É.
@bot.callback_query_handler(func=None, products_config=add_products_factory.filter())
def products_callback(call: types.CallbackQuery):
    if bot.answer_callback_query(callback_query_id=call.id):
        callback_data: dict = add_products_factory.parse(callback_data=call.data)
        product_id = int(callback_data['product_id'])
        product = db.get_product(product_id=product_id)
        db.add_basket_line(user_id=call.from_user.id,
                           product_id=product_id)

        bot.send_message(chat_id=call.message.chat.id,
                         text=f'*{product[2]}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
                         parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è (-1) –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
@bot.callback_query_handler(func=None, products_config=delete_products_factory.filter())
def products_callback(call: types.CallbackQuery):
    if bot.answer_callback_query(callback_query_id=call.id):
        callback_data: dict = delete_products_factory.parse(callback_data=call.data)
        product_id = int(callback_data['product_id'])
        product = db.get_product(product_id=product_id)
        if db.user_has_product_in_basket(user_id=call.from_user.id, product_id=product_id):
            db.delete_basket_line(user_id=call.from_user.id,
                                  product_id=product_id)

            bot.send_message(chat_id=call.message.chat.id,
                             text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *{product[2]}* —É–º–µ–Ω—å—à–µ–Ω–æ.',
                             parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è (X) –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
@bot.callback_query_handler(func=None, products_config=remove_products_factory.filter())
def products_callback(call: types.CallbackQuery):
    if bot.answer_callback_query(callback_query_id=call.id):
        callback_data: dict = remove_products_factory.parse(callback_data=call.data)
        product_id = int(callback_data['product_id'])
        product = db.get_product(product_id=product_id)
        if db.user_has_product_in_basket(user_id=call.from_user.id, product_id=product_id):
            db.remove_basket_line(user_id=call.from_user.id,
                                  product_id=product_id)

            bot.send_message(chat_id=call.message.chat.id,
                             text=f'*{product[2]}* —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∏–∑–Ω—ã',
                             parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ -> –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.
@bot.callback_query_handler(func=lambda c: c.data == 'confirm_basket')
def confirm_basket_callback(call: types.CallbackQuery):
    if bot.answer_callback_query(callback_query_id=call.id):
        basket = db.get_products_in_basket(call.from_user.id)
        if len(basket) != 0:
            if db.user_has_phone(user_id=call.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω.
                if db.user_has_delivery_address(user_id=call.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å.
                    db.add_order(call.from_user.id)  # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–¥–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –≤ orders –∏ order_lines)
                    db.clear_basket(call.from_user.id)  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

                    bot.send_message(chat_id=call.message.chat.id,
                                     text='‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*',
                                     parse_mode='Markdown')
                else:
                    bot.send_message(chat_id=call.message.chat.id,
                                     text='üöö –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –î–ª—è —ç—Ç–æ–≥–æ –≤–Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—à–∏—Ç–µ `/address` \n'
                                          '–ü—Ä–∏–º–µ—Ä: `/address –õ–æ–±–∞–Ω–∫–∞19 –∫–≤41`',
                                     parse_mode='Markdown')
            else:
                bot.send_message(chat_id=call.message.chat.id,
                                 text='–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
                                 parse_mode='Markdown',
                                 reply_markup=phone_markup())

        else:
            bot.send_message(chat_id=call.message.chat.id,
                             text='‚ùï–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.
@bot.callback_query_handler(func=lambda c: c.data == 'put_last_order')
def confirm_basket_callback(call: types.CallbackQuery):
    if bot.answer_callback_query(callback_query_id=call.id):
        db.put_last_order_to_basket(call.from_user.id)
        bot.send_message(chat_id=call.message.chat.id,
                         text='–ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
@bot.message_handler(commands=['start'])
def start_message(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        db.add_user(user_id=message.from_user.id,
                    user_name=message.from_user.first_name,
                    phone=None,
                    delivery_address=None)

    except sqlite3.Error as err:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", err)

    bot.send_message(chat_id=message.chat.id,
                     text='ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n_–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, '
                          '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ '
                          '–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π_ /help\b',
                     parse_mode='Markdown',
                     reply_markup=general_markup()
                     )


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    db.save_user_phone(user_id=message.from_user.id, phone=message.contact.phone_number)

    bot.send_message(chat_id=message.from_user.id,
                     text='–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                     reply_markup=general_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
@bot.message_handler(commands=['address'])
def address_handler(message):
    delivery_address = ' '.join(message.text.split()[1:])
    db.save_user_delivery_address(user_id=message.from_user.id, delivery_address=delivery_address)
    bot.send_message(chat_id=message.from_user.id,
                     text=f'üöö –í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: *{delivery_address}*\n'
                          f'üìç_–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å_\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                     parse_mode='Markdown',
                     reply_markup=general_markup())


def get_help_text(user_name):
    return f'ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *{user_name}!*\n' \
           f'–Ø - —á–∞—Ç-–±–æ—Ç –ª—É—á—à–µ–π –±—É—Ä–≥–µ—Ä–Ω–æ–π –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞! ' \
           f'–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è, ' \
           f'–∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É, –∞ —Ç–∞–∫–∂–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.\n\n' \
           f'_–í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ ' \
           f'–ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã:_\n' \
           f'*üç¥ –ú–µ–Ω—é* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –∫–æ—Ä–∑–∏–Ω—É\n' \
           f'*üõí –ö–æ—Ä–∑–∏–Ω–∞* - –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–µ—Ä–µ—á–Ω–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ, –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å ' \
           f' –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞\n' \
           f'*üì© –ù–æ–≤–æ—Å—Ç–∏* - –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏/–∞–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n' \
           f'*üìã –ó–∞–∫–∞–∑—ã* - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ—Ä–∑–∏–Ω—É\n' \
           f'*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ\n\n' \
           f'_–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ' \
           f'–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:_\n‚òéÔ∏è`+666(66)666-66-66`'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.
@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(chat_id=message.from_user.id,
                     text=get_help_text(message.from_user.first_name),
                     parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
@bot.message_handler(content_types=['text'])
def general_markup_handler(message):
    if message.text == 'üç¥ –ú–µ–Ω—é':
        bot.send_message(chat_id=message.chat.id,
                         text='üç¥ –ú–µ–Ω—é –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è',
                         reply_markup=catalog_markup(db.get_catalogs()))

    elif message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        basket = db.get_products_in_basket(message.from_user.id)
        if len(basket) != 0:
            total_price = 0.00  # –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞.
            for item in basket:
                product = db.get_product(item[2])
                total_price = total_price + product[4] * item[3]

                bot.send_message(chat_id=message.chat.id,
                                 text=f'*{product[2]}*, {item[3]} —à—Ç',
                                 reply_markup=product_in_basket_markup(item[2]),
                                 parse_mode='Markdown')
                sleep(0.2)

            address = db.get_user_delivery_address(message.from_user.id)
            if address is None:
                address = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            bot.send_message(chat_id=message.chat.id,
                             text=f'*–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* {total_price} —Ä—É–±\n'
                                  f'*–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {address}\n',
                             parse_mode='Markdown',
                             reply_markup=confirm_basket_markup())
        else:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ùï–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

    elif message.text == 'üìã –ó–∞–∫–∞–∑—ã':
        last_order = db.get_last_order_info(message.from_user.id)
        if last_order:
            bot.send_message(chat_id=message.chat.id,
                             text=last_order,
                             reply_markup=last_order_markup())
        else:
            bot.send_message(chat_id=message.chat.id,
                             text='–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞')

    elif message.text == 'üì© –ù–æ–≤–æ—Å—Ç–∏':
        news_text = 'üìå_–ù–æ–≤–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è_\n\n'
        for news in db.get_news():
            news_text = f'{news_text}üìù{news[1][8:10]}.{news[1][5:7]}.{news[1][:4]}\n{news[0]}\n\n'
        bot.send_message(chat_id=message.chat.id,
                         text=news_text,
                         parse_mode='Markdown')

    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        phone_status = '‚ùå'
        address_status = '‚ùå'
        if db.user_has_phone(message.from_user.id):
            phone_status = '‚úÖ'
        if db.user_has_delivery_address(message.from_user.id):
            address_status = '‚úÖ'

        bot.send_message(chat_id=message.chat.id,
                         text=f'‚öôÔ∏è *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n'
                              f'‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_status}\n'
                              f'üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address_status}\n\n'
                              f'_–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ_ `/address` \n'
                              '_–ü—Ä–∏–º–µ—Ä:_ `/address –õ–æ–±–∞–Ω–∫–∞19 –∫–≤41`',
                         parse_mode='Markdown')

    elif message.text == '‚ùî–ü–æ–º–æ—â—å':
        bot.send_message(chat_id=message.chat.id,
                         text=get_help_text(message.from_user.first_name),
                         parse_mode='Markdown')
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –∏–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    else:
        # reply_to - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        bot.reply_to(message=message,
                     text='<–Ω–µ–≤–µ—Ä–Ω–∞—è_–∫–æ–º–∞–Ω–¥–∞>')


# if __name__ == '__main__':
#     # –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ TeleBot –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
#     # - interval: int (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0) - –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –æ–ø—Ä–æ—Å.
#     # - timeout: integer (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20) - –¢–∞–π–º-–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.
#     # - Allowed_updates: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç) - —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
#     bot.infinity_polling()
